# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_chatbot/00_requirements.ipynb.

# %% auto 0
__all__ = ['model', 'captureRequirementsPrompt', 'basePrompt', 'chain', 'config', 'getRequirementsResponse',
           'requirementResponse', 'getRequirements']

# %% ../nbs/09_chatbot/00_requirements.ipynb 1
from langchain_openai import ChatOpenAI

model = ChatOpenAI()


# %% ../nbs/09_chatbot/00_requirements.ipynb 2
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder

from .keys import keys

captureRequirementsPrompt = """
You are a requirements recorder, helping a job searcher, by recording the requirements they have in the following areas:\n\n"""+  "\n".join(keys) + """\n\n
 Listen to the user's message, and return a json object with two keys: 'new_requirements', and 'remove_requirements'. The first one listing new requirements that the user has stated, if any, and the other listing requirements the user wants to remove from the requirements list. Use only the  list of requirements above. Do not add any new types of requirement to the list. 

For example, if the user says "I want a job in New York, you should return the following json object:

{{
  "new_requirements": {{
    "location": "New York",
  }},
  "remove_requirements": {{
  }}
}}

For example, if the user says "I want a job in California, with a salary of 100k, and I don't want a job in Ohio", you should return the following json object:

{{
  "new_requirements": {{
    "location": "New York",
    "salary": 100000
  }},
  "remove_requirements": {{
    "location": "Ohio"
  }}
}}

--------------------\n\n
"""

basePrompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            captureRequirementsPrompt,
        ),
        MessagesPlaceholder(variable_name="messages"),
    ]
)

chain = basePrompt | model


# %% ../nbs/09_chatbot/00_requirements.ipynb 3
config = {"configurable": {"session_id": "abc6"}}

# %% ../nbs/09_chatbot/00_requirements.ipynb 4
from langchain_core.messages import HumanMessage
import json

# Invoke the requirements bot with the user's message
def getRequirementsResponse(input:str):
    response = chain.invoke(input=[HumanMessage(input)])

    json_response = json.loads(response.content)

    return json_response


# %% ../nbs/09_chatbot/00_requirements.ipynb 6
from pydantic import BaseModel

class requirementResponse(BaseModel):
    new_requirements: dict
    remove_requirements: dict


# %% ../nbs/09_chatbot/00_requirements.ipynb 7
# Return a lists of desired and undesired requirements
def getRequirements(input:str) -> requirementResponse:
    json_response = getRequirementsResponse(input)
    validated_response = requirementResponse(**json_response)

    return validated_response

