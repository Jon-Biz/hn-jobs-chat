# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/chatbot/requirementsBot.ipynb.

# %% auto 0
__all__ = ['model', 'captureRequirementsPrompt', 'basePrompt', 'chain', 'config', 'requirements', 'requirementsPrompt',
           'getRequirementsResponse', 'requirementResponse', 'handleResponse', 'getRequirements',
           'getRequirementsPrompt', 'handleSubmit']

# %% ../nbs/chatbot/requirementsBot.ipynb 1
from langchain_core.messages import HumanMessage

from langchain_openai import ChatOpenAI

model = ChatOpenAI()


# %% ../nbs/chatbot/requirementsBot.ipynb 2
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder

captureRequirementsPrompt = """
You are a requirements recorder, helping a job searcher, by recording the requirements they have in the following areas: location, tech_stack, employement_type, and salary. Listen to the user's message, and return a json object with two keys: 'new_requirements', and 'remove_requirements'. The first one listing new requirements that the user has stated, if any, and the other listing requirements the user wants to remove from the requirements list. 

For example, if the user says "I want a job in New York, with a salary of 100k", you should return the following json object:

{{
  "new_requirements": {{
    "location": "New York",
    "salary": 100000
  }},
  "remove_requirements": {{
  }}
}}

For example, if the user says "I want a job in New York, with a salary of 100k, and I don't want a job in California", you should return the following json object:

{{
  "new_requirements": {{
    "location": "New York",
    "salary": 100000
  }},
  "remove_requirements": {{
    "location": "California"
  }}
}}

"""

basePrompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            captureRequirementsPrompt,
        ),
        MessagesPlaceholder(variable_name="messages"),
    ]
)

chain = basePrompt | model


# %% ../nbs/chatbot/requirementsBot.ipynb 3
config = {"configurable": {"session_id": "abc6"}}

# %% ../nbs/chatbot/requirementsBot.ipynb 4
def getRequirementsResponse(input:str):
    response = chain.invoke(input=[HumanMessage(input)])

    return response.content


# %% ../nbs/chatbot/requirementsBot.ipynb 5
requirements = {
    'want': {},
    'donotwant': {} 
}



# %% ../nbs/chatbot/requirementsBot.ipynb 6
from pydantic import BaseModel

class requirementResponse(BaseModel):
    new_requirements: dict
    remove_requirements: dict


# %% ../nbs/chatbot/requirementsBot.ipynb 7
# TODO: dyanamically parse response into requirement keys

def handleResponse(response: requirementResponse):
    if response.new_requirements:
        for key, value in response.new_requirements.items():
            requirements['want'][key] = value

    if response.remove_requirements:
        for key, value in response.remove_requirements.items():
            requirements['donotwant'][key] = value

            if key in requirements['want']:
                del requirements['want'][key]

    return response

# %% ../nbs/chatbot/requirementsBot.ipynb 8
from langchain_core.prompts import ChatPromptTemplate

def getRequirements():
    return requirements

requirementsPrompt = ChatPromptTemplate.from_template(
"""Current search requirements are: {requirements}""")

def getRequirementsPrompt():
    return requirementsPrompt.format(requirements=requirements)

getRequirementsPrompt()


# %% ../nbs/chatbot/requirementsBot.ipynb 9
import json
def handleSubmit(input:str):
    print('input', input)
    response = getRequirementsResponse(input)
    print('response', response)
    jsonResponse = json.loads(response)
    print('jsonResponse', jsonResponse)
    validated_response = requirementResponse(**jsonResponse)

    handleResponse(validated_response)

    return getRequirementsPrompt()
