# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_pipeline-scrape/01_clean.ipynb.

# %% auto 0
__all__ = ['getResponse', 'toJsonOrReprompt', 'reprompt', 'isJob']

# %% ../nbs/03_pipeline-scrape/01_clean.ipynb 9
import json
import os
import openai

# openai.api_base = "https://openrouter.ai/api/v1"
openai.api_key = os.environ.get('OPENAI_API_KEY')

def getResponse(text: str):
    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": text}],
    )

    return response.choices[0].message.content

def toJsonOrReprompt(item, response, repromptNum=None):

    print('response', response)
    # try catch here. If item fails, rerun it. If it fails more than 3 times, return None
    try:
        return json.loads(response.replace('\n',''))
    except:
        if repromptNum == None:
            repromptNum = 0
        
        if repromptNum > 3:
            return { "error": "Could not receive valid json: Too many reprompts","item": '+item+'}
        
        repromptNum += 1
        return reprompt(response, repromptNum)
    
def reprompt(item, prevResponse, repromptNum=None):
    newPrompt = 'Your response: \n\n'+prevResponse.text+'\n\nwas not valid json. Please try again. Here is the original request:\n' + item

    response = getResponse(newPrompt)

    return toJsonOrReprompt(item, response, repromptNum=repromptNum)


def isJob(item):

    # If the comment is empty, it is not a job posting. We do not need LLM to determine this.
    if item['comment'] == "":
        return False

    text="""
        Is the following message a job posting, or something else? If it is a job posting, reply { "isPosting": true }. If it is not a job posting, reply with { "isPosting": false }.\n-----------------\n
    """+ item['comment']

    result = getResponse(text)
    resp = toJsonOrReprompt(item, result)
 
    if 'error' in resp.keys():
        print (resp['error'])
    else:
        return resp['isPosting']


