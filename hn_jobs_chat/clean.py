# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_clean.ipynb.

# %% auto 0
__all__ = ['getResponse', 'toJson', 'reprompt', 'isJob', 'processItems']

# %% ../nbs/01_clean.ipynb 4
import os
import openai

# openai.api_base = "https://openrouter.ai/api/v1"
openai.api_key = os.environ.get('OPENAI_API_KEY')

def getResponse(text: str):
    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": text}],
    )

    result = {
        "input_text": text,
        "text": response.choices[0].message.content
    }

    return result

# %% ../nbs/01_clean.ipynb 5
import json

def toJson(response, repromptNum=None):
    # try catch here. If item fails, rerun it. If it fails more than 3 times, return None
    try:
        return json.loads(response.replace('\n',''))
    except:
        if repromptNum == None:
            repromptNum = 0
        
        if repromptNum > 3:
            return '{ "errpr": "Could not receive valid json: Too many reprompts","item": '+item+'}'
        
        repromptNum += 1
        return reprompt(response, repromptNum)
    
def reprompt(item, repromptNum=None):
    newPrompt = 'Your response: \n\n'+item.text+'was not valid json. Please try again. Here is the original request:\n' + item

    response = getResponse(newPrompt)

    print('response')
    return toJson(response['text'], repromptNum=repromptNum)


# %% ../nbs/01_clean.ipynb 7
# def extractData(item, resultItem): 
#     text = "From the following job description, extract the name of the company, the job title, job requirements and how they want to be contacted: " + item['comment'] + "\n\n-----------\n\nReturn the information as a json object with the following keys: 'company', 'job_title', 'job_requirements','contact_url'. If you can't find a particular piece of information, return 'Unavailable' for the value of the key."

#     result = getResponse(text)

#     response = toJson(result['text'])

#     # TODO: add validation to check if the response is valid
#     resultItem['company'] = response['company']
#     resultItem['job_title'] = response['job_title']
#     resultItem['job_requirements'] = response['job_requirements']
#     resultItem['contact_url'] = response['contact_url']

#     print(resultItem)



# %% ../nbs/01_clean.ipynb 8
def isJob(item, resultItem):
    text='Is the following message a job posting, or something else? If it is a job posting, reply { "isPosting: true }. If it is not a job posting, reply with { "isPosting": false }\n-----------------\n'+ item['comment']

    result = getResponse(text)
    resp = toJson(result['text'])
 
    resultItem['isPosting'] = resp['isPosting']

    return resultItem

# %% ../nbs/01_clean.ipynb 9
# Determine if the items are jobs
def processItems(items):

    results = []

    for item in items:
        results.append(isJob(item))

    return results
