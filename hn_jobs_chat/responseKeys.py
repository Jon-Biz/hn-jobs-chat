# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_response_keys.ipynb.

# %% auto 0
__all__ = ['initial_keys', 'keyStr', 'model', 'Response', 'callValidator', 'getResponse', 'validate', 'repromptRevalidate']

# %% ../nbs/02_response_keys.ipynb 1
# These keys were retreived from previous analysis. The prompts will add any that are needed.
initial_keys = [
    'company: name of the company',
    'location: country, city or location otherwise stated',
    'timezone: timezones that are referred to in the job post, if any',
    'industry: the industry vertical that the company is part of',
    'target_market: the type of consumer or businesses that are targeted by the company venture',
    'company_status: the current situation that company is in',
    'company_description: description of the company, as described in the job post',
    'company_goal: primary focus of the company',
    'company_stage: venture stage of the company, if applicable',
    'more_company_info: an array. any company information in the listing not otherwise covered by company_goal, company_status, company_stage, company_description, industry or location',
    'employment_type: full-time, part-time, contract, or as otherwise described',
    'remote_or_local_details: details about the remote, local, hybrid or otherwise work arrangement as described',
    'job_title: job title for the position. Use the singular tense',
    'job_description: description of the job as described in the job post',
    'job_requirements: an array of the specific job requirements, listed in the job posting',
    'job_soft_skills: an array of any soft skills required by the job, as outlined in the posting',
    'product_description: a description of the product that job is related to, if any',
    'tech_stack: this is an array of strings, stating the technical systems that the company uses. This is not the same as job requirements list, use that key if the tech stack is not explicitly presented',
    'application_process: any description of the application processes that the person applying will undergo',
    'contact_email: a single email. the contact email provided in the job post. if multiple emails are presented, add the additional as an item in the additional notes array',
    'application_url: a single url. The url used to apply for the job. information about the company other than the job listing should be placed in the information_urls key',
    'information_urls: an array. if the posting states that more information about the company or the job is available at a URL other than the job posting, recored those urls in the array here',
    'additional_notes: an array. any additional information about the company, role or position, not covered by the other keys',
    'compensation: any compensation and/or benefits described in the job post'
]

# %% ../nbs/02_response_keys.ipynb 2
keyStr = '\n'.join(initial_keys)


# %% ../nbs/02_response_keys.ipynb 3
from pydantic import BaseModel

class Response(BaseModel):
    company: str = ''
    location: str = ''
    timezone: str = ''
    industry: str = ''
    target_market: str = ''
    company_status: str = ''
    company_description: str = ''
    company_goal: str = ''
    company_stage: str = ''
    more_company_info: list[str] = []
    employment_type: str = ''
    remote_local_details: str = ''
    job_title: str = ''
    job_description: str = ''
    job_requirements: list[str] = []
    job_soft_skills: list[str] = []
    product_description: str = ''
    tech_stack: list[str] = []
    application_process: str = ''
    contact_email: str = ''
    application_url: str = ''
    information_urls: list[str] = []
    additional_notes: list[str] = []
    compensation: str = ''


def callValidator(response):
    return Response(**response)

# %% ../nbs/02_response_keys.ipynb 4
import json
from pydantic import ValidationError
from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate

model = ChatOpenAI()

def getResponse(prompt):
    return model.invoke(prompt)

def validate(response, repromptNum=None):
    # try catch here. If item fails, rerun it. If it fails more than 3 times, return None
    try:
        callValidator(exampleOne)
    except ValidationError as e:
        if repromptNum == None:
            repromptNum = 0

        print('error', e)
        print('attempt:', repromptNum + 1)

        if repromptNum > 3:
            return '{ "error": "Could not receive valid json: Too many reprompts","item": '+item+'}'
        
        repromptNum += 1

        return repromptRevalidate(response, str(e), repromptNum)
    
def repromptRevalidate(item, e,  repromptNum=None):
    PromptTemplate.from_template = 'Your response did not follow the instructions in regards to appropriate keys. Here is the error message from pydantic \n\n'+e+'\n\n. Here is a description of the keys: \n\n'+keyStr+'\n\nPlease update your response, fixing any mistakenly assigned keys. The output should be one or more json objects in an array. Here is your response again:\n\n' + item

    response = getResponse(newPrompt)

    print('response')
    return validate(response.content, repromptNum=repromptNum)


# %% ../nbs/02_response_keys.ipynb 6
import json

def validate(response, repromptNum=None):
    # try catch here. If item fails, rerun it. If it fails more than 3 times, return None
    try:
        validate(exampleOne)
    except ValidationError as e:
        if repromptNum == None:
            repromptNum = 0
        
        if repromptNum > 3:
            return '{ "errpr": "Could not receive valid json: Too many reprompts","item": '+item+'}'
        
        repromptNum += 1
        return repromptRevalidate(response, e, repromptNum)
    
def repromptRevalidate(item, repromptNum=None):
    newPrompt = 'Your response did not follow the instructions in regards to appropriate keys. Here is the error message from pydantic \n\n'+e+'\n\n. Here is a description of the keys: \n\n'+keys+'\n\nPlease update your response, fixing any mistakenly assigned keys. The output should be one or more json objects in an array. Here is your response again:\n\n' + item

    response = getResponse(newPrompt)

    print('response')
    return validate(response['text'], repromptNum=repromptNum)

